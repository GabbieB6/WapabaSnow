% Code for Wapaba Snow Model

% define inputs for an arbitrary two year period
P            = [248.1; 151.3; 212.6; 18.6; 298.3; 388.9; 522.5; 214.2; 310.8; 51.3; 108.6; 198.5; 10.4; 42.4; 81.3; 91.3; 50.8; 356.7; 746.7; 357.6; 786.2; 153.6; 215.6; 181.2];
PET          = [160.6; 121.6; 103.7; 66.0; 34.4; 23.1; 26.0; 44.5; 72.0; 113.6; 143.8; 164.0; 188.8; 148.3; 113.2; 68.9; 42.2; 23.4; 26.7; 43.0; 80.0; 119.4; 146.7; 165.2];
T            = [18.5; 18.6; 16.1; 12.0; 8.9; 4.1; 3.6; 6.1; 9.4; 12.8; 17.6; 18.2; 20.7; 22.0; 18.3; 12.6; 9.4; 5.7; 3.6; 5.3; 8.0; 12.7; 15.8; 18.4];
ListOfMonths = [1;2;3;4;5;6;7;8;9;10;11;12;1;2;3;4;5;6;7;8;9;10;11;12];
WAPABApars = [4.3486 8.1467 0.4531 117.7555 52.6407 10.5145 11.2104 1.00 1.00];

% set parameters
ParInput.a1             = WAPABApars(1, 1); 
ParInput.a2             = WAPABApars(1, 2); 
ParInput.B              = WAPABApars(1, 3); 
ParInput.Smax           = WAPABApars(1, 4); 
ParInput.K              = WAPABApars(1, 5); 
ParInput.snow_a1        = WAPABApars(1, 6); 
ParInput.snow_a2_diff   = WAPABApars(1, 7); 
ParInput.adjust_allsnow = WAPABApars(1, 8);
ParInput.adjust_nosnow  = WAPABApars(1, 9);

precip_adjust_req = false; % precip adjustment turned off as precipitation is already adjusted

% run WAPABA
[SimFlows, snowpack, SimVars] = wapaba_snow(ParInput, P, PET, T, ListOfMonths, precip_adjust_req);

%% Functions
function [SimFlows, snowpack, SimVars] = wapaba_snow(ParVals, precip, PET, temp, month, precip_adjust_req)	
	% wapaba_snow is a function which combines the WAPABA model with the two-parameter monthly snow module from WASMOD (see MonthlySnowModule below)

    % MonthlySnowModule identifies the amount of solid precipitation per
    % month, and resulting snowmelt the following month. This is then represented 
    % as a "delayed" rainfall effect within wapaba. Therefore, the resulting
    % rainfall (precip - snowfall) is utilised within wapaba, with the
    % snowmelt added to this. 
	
	% As there is only a one-way transfer from snow module to non-snow model 
	% (ie. WAPABA), we can run entire timeseries of snow module *first* then 
	% run entire timeseries of WAPABA.

    % Precipitation adjustment:
    %   It has been identified that due to the presence of snow, precipitation is 
    %   often under-measured. Therefore, a precipitation adjustment may be 
    %   required. As the precipitation underestimate is a function of the snow 
    %   present for that month, the precipitation is adjusted linearly determined 
    %   by the proportion of snowfall.
    
    %   Two further parameters are used to determine the adjustment, where
    %   adjust_allsnow will adjust the precipitation by a given amount when the 
    %   snow proportion = 1, and adjust_nosnow will adjust the precipitation by a 
    %   given amount when the snow proportion for that month = 0. The remaining 
    %   precipitation will be adjusted linearly between these two points. 

    % Model Inputs
    %   - 'ParVals': A structure for parameters set to be run
    %       - a1, a2, B, Smax, K: wapaba parameters (see Wang et al., 2011)
    %       - snow_a1, snow_a2_diff: MonthlySnowModule parameters (see function below)
    %       - adjust_allsnow, adjust_nosnow: precipitation adjustment parameters
    %   - 'precip': precipitation for a given catchment as timeseries
    %   - 'PET': potential evapotranspiration for a given catchment as timeseries
    %   - 'temp': average maximum monthly temperature for a given catchment as timeseries (see MonthlySnowModule below)
    %   - 'month': timeseries of month index
    %   - 'precip_adjust_req': BOOLEAN value, (true/false) to identify if precipitation adjustment required


    % Model Outputs
    %   - 'SimFlows': To contain the predicted streamflow timeseries from wapaba
    %   - 'SimVars': To contain data from the MonthlySnowModule and from wapaba
    %       - 'SimVars.snow': Timeseries of the outputs of MonthlySnowModule: 
    %           - 'snowfall', 'prop_snow', 'snowpack', 'snowmelt'
    %       - 'SimVars.wapaba': Timeseries of the outputs of wapaba:
    %           - 'Flows', 'states', 'Flux'
    %           - 'input_precip': the precipitation used within wapaba 
    %           (after snow adjustment, including snowmelt, after
    %           precipitation adjustment if required)
    %       - 'SimVars.balance': The water balance calculated at the end of
    %       running wapaba_snow

    % if the precipitation adjustment is required (true)
    if precip_adjust_req

        % run function to calculate proportion snow
        [PropSnow] = GetPropSnow(ParVals, temp);

        % Import precip-adjustment model parameters
        adjust_allsnow = ParVals.adjust_allsnow;
        adjust_nosnow = ParVals.adjust_nosnow;
        
        % factor precip as a function of PropSnow: linearly between 100% and 0% snowfall
        adjust_factor = ((adjust_allsnow - adjust_nosnow) * PropSnow) + adjust_nosnow;

        precip_adjust = precip .* adjust_factor.';
        
        % run monthly snow module to determine snow fall/melt + remaining rainfall
        [rain, snowmelt, snowpack, SimVars.snow] = MonthlySnowModule(ParVals, temp, precip_adjust);
        % snow + rain = precip
        % water in = water out + deltaS
        % snow = melt + (snowpack(i)-snowpack(i-1))

        % add snowmelt to the rain value for wapaba's precipitation 
        wapaba_input_precip_adjust = rain.' + snowmelt.';

        % run wapaba with the calculated + adjusted rainfall
        [SimFlows, SimVars.wapaba] = wapaba(ParVals, wapaba_input_precip_adjust, PET, month);
        SimVars.wapaba.input_precip = wapaba_input_precip_adjust;


        SimVars.snow.precip_adjust = precip_adjust;
        SimVars.snow.snowmelt = snowmelt;
        SimVars.snow.first_prop_snow = PropSnow;
    % if the precipitation adjustment is NOT required (false)
    else
        % run monthly snow module to determine snow fall/melt + remaining rainfall
        [rain, snowmelt, snowpack, SimVars.snow] = MonthlySnowModule(ParVals, temp, precip);
        
        % add snowmelt to the rain value for wapaba's precipitation 
        wapaba_input_precip = rain.' + snowmelt.';

        % run wapaba with the calculated rainfall
        [SimFlows, SimVars.wapaba] = wapaba(ParVals, wapaba_input_precip, PET, month);
        SimVars.wapaba.input_precip = wapaba_input_precip;
    end

    % Run a mass balance check for each month
    % in = out + change in storage
    NumTimeSteps = size(SimFlows', 1); 
    for iTS = 1:NumTimeSteps
        A=iTS-1;
        if A==0
            SysBalance=0;
        else
            rain_thismonth = SimVars.wapaba.input_precip(iTS);
            snow_thismonth = SimVars.snow.snowfall(iTS);
            d_snowpack     = snowpack(iTS-1)   - snowpack(iTS);
            d_G            = SimVars.wapaba.States.G(iTS-1) - SimVars.wapaba.States.G(iTS);
            d_S            = SimVars.wapaba.States.S(iTS-1) - SimVars.wapaba.States.S(iTS);
            melt_thismonth = snowmelt(iTS);
            ET_thismonth   = SimVars.wapaba.Flux.ET(iTS);
            flow_thismonth = SimFlows(iTS);

    	    SysBalance = round(rain_thismonth + snow_thismonth + d_snowpack + d_G + d_S - melt_thismonth - ET_thismonth - flow_thismonth,4);
                   
        end
        SimVars.Balance(iTS) = SysBalance;
    end	
end


function [PropSnow] = GetPropSnow(ParVals, temp)
    % This function utilises the first part of the MonthlySnowModule
    % framework, to determine the calculated snow proportions. See
    % MonthlySnowModule below for further info.

    % Model Inputs
    % - 'ParVals': A structure for parameters set to be run
    %     - 'snow_a1': The model input for WASMOD's 'a1', the upper
    %         temperature limit. 
    %     - 'snow_a2_diff': positive difference between the two temperature 
    % thresholds where a2 is the lower temperature limit (see function below for more info)
    % - 'temp': average maximum monthly temperature as timeseries

    % Model Outputs
    %       - 'prop_snow': proportion of solid precipitation per month

    % import model Parameters
    a1 = ParVals.snow_a1;
    % snow_a2 parameter is defined as the difference between a1 and a2, and 
    % limited to being positive to ensure that a2 is always less than a1 (as the 
    % alternative is not physically possible)
    a2 = a1 - ParVals.snow_a2_diff;
	
    % initialise size of arrays
    NumMonths = size(temp, 1);
    PropSnow (1:NumMonths) = -99.99;
    for iMonth = 1:NumMonths
        PropSnow(iMonth) = max(((1-(exp( (temp(iMonth)-a1)/(a1-a2) )) ^2)) , 0);
    end
end

function [rain, snowmelt, snowpack, SimVars] = MonthlySnowModule(ParVals, temp, precip, archive_req)

    % Created December 2022 by Gabrielle Burns and Keirnan Fowler

    % Based off the Water and Snow Module - WASMOD (introduced in the 1996 paper 
    % by Xu, Seibert & Halldin, later refined within a book chapter by Xu in 
    % 2002), MonthlySnowModule utilises the two-parameter monthly snow module 
    % imbedded within WASMOD.

    % The module determines snowfall based on where the monthly temperature
    % sits between two parameters, a1 and a2 (where a1>a2)
    %       - monthly temp > a2: snow melting begins 
    %       - monthly temp > a1: snowfall stops 

    % The daily maximum temperatures averaged across the month have been
    % used within the module, however, due to the nature of the module if
    % alternative temperatures were used, the calibration will allow the correct
    % parameter thresholds to ensure the results are still considered valid 
    % (e.g daily means averaged monthly, or maximum daily mean across the month)

    % The MonthlySnowModule determines the snowfall as a proportionate depth of 
    % the precipitation of that month. The module therefore identifies the liquid
    % precipitation (rainfall) of that month. A portion of the snowfall is
    % converted to snowmelt, and the remaining is considered to build up as
    % snowpack, which then may be melted the following month depending on
    % the temperatures.

    % Xu, C. Y., Seibert, J., & Halldin, S. (1996). Regional water balance 
    % modelling in the NOPEX area: development and application of monthly water 
    % balance models. Journal of hydrology, 180(1-4), 211-236.
    % https://doi.org/10.1016/0022-1694(95)02888-9 

    % Xu, C. (2002). WASMODThe water and snow balance modeling system.
    % Mathematical models of small watershed hydrology and applications, 555-590.

    % Model Inputs
    % - 'ParVals': A structure for parameters set to be run
    %     - 'snow_a1': The model input for WASMOD's 'a1', the upper
    %         temperature limit. 
    %     - 'snow_a2_diff': converted to the model input from WASMOD,
    %         'a2' (snow_a1 - snow_a2_diff), snow_a2_diff is the positive
    %         difference between the two temperature thresholds, where a2 is
    %         the lower temperature limit. By specifying the limits in this
    %         way, it allows a1>a2, as the alternative will result in
    %         impossible conditions. 
    % - 'temp': average maximum monthly temperature as timeseries
    % - 'precip': precipitation as timeseries

    % Model Outputs
    %   - 'rain': liquid precipitation as timeseries
    %   - 'SimVars':
    %       - 'snowfall': depth of solid precipitation per month 
    %       - 'prop_snow': proportion of solid precipitation per month
    %       (snowfall/total precipitation)
    %       - 'snowpack': snow depth build up in each month 
    %       - 'snowmelt': snow depth that melts away per month (added to monthly
    %       precip in wapaba)

    % import model Parameters
    a1 = ParVals.snow_a1;
    % snow_a2 parameter is defined as the difference between a1 and a2, and 
    % limited to being positive to ensure that a2 is always less than a1 (as the 
    % alternative is not physically possible)
    a2 = a1 - ParVals.snow_a2_diff;
	
    % initialise size of arrays
    NumTimesteps                      = size(precip, 1);
    rain             (1:NumTimesteps) = -99.99;
    snowmelt         (1:NumTimesteps) = -99.99;
    snowpack         (1:NumTimesteps) = -99.99;
    SimVars                           = [];
    SimVars.snowfall (1:NumTimesteps) = -99.99;
    SimVars.prop_snow(1:NumTimesteps) = -99.99;

    % loop to run model for each timestep
	for iTS = 1:NumTimesteps
        P = precip(iTS);
        Temp = temp(iTS);
        % calculate snow from proportion of precipitation
		snow = P * max(((1-(exp( (Temp-a1)/(a1-a2) )) ^2)) , 0);
        % calculate remaining liquid precipitation (rain)
		r = P - snow;
        % calculate snow melt and pack
        A = iTS-1;
		if A == 0
            % set snowmelt & snowpack to 0 for first month
            melt = 0;
            spack = 0;
        else
            % calculate snow melt from proportion of snowpack from previous month
			melt = snowpack(iTS-1) * max(((1-(exp( -(Temp-a2)/(a1-a2) )) ^2)) , 0);
			% calculate snowpack for current month
			spack = snowpack(iTS-1) + snow - melt;
        end

        % Assign rain and SimVars (snow fall, proportion, pack and melt) 
        rain(iTS)              = r;
        snowpack(iTS)          = spack;
        snowmelt(iTS)          = melt;
        if archive_req
            SimVars.snowfall(iTS)  = snow;
            SimVars.prop_snow(iTS) = snow/P; % proportion of snow/preciptation
        end


    end
end

function [SimFlows, SimVars] = wapaba(ParVals, precip, PET, month, archive_req)
    % Wapaba - Wang et al., 2011
    % Coded by Dominic Regan-Beasley, Michael Nixon & Keirnan Fowler
    % University of Melbourne - Department of Infrastructure Engineering
    % July - November 2022

    % Model Inputs
    % 'ParVals': A structure for parameters set to be run
        % a1, a2, B, Smax, K wapaba parameters - see Wang et al., 2011
    % 'precip': precipitation for a given catchment as timeseries
    % 'PET': potential evapotranspiration for a given catchment as timeseries
    % 'month': timeseries of month index

    % Import model parameters
    a1 = ParVals.a1;
    a2 = ParVals.a2;
    B = ParVals.B;
    Smax = ParVals.Smax;
    K = ParVals.K;

    % initialise size of arrays
    NumTimesteps = size(precip, 1); 
    SimFlows         (1:NumTimesteps) = -99.99; 
    SimVars.Flows.Qb (1:NumTimesteps) = -99.99; 
    SimVars.Flows.Qs (1:NumTimesteps) = -99.99;
    SimVars.States.G(1:NumTimesteps) = -99.99;
    SimVars.States.S(1:NumTimesteps) = -99.99;
    SimVars.States.TotalWater (1:NumTimesteps)= -99.99; 
    SimVars.Flux.ET  (1:NumTimesteps) = -99.99; 
    SimVars.Flux.R   (1:NumTimesteps) = -99.99; 
    T(1:NumTimesteps) = -99.99;
        
    % Step 1: initialise model states
    S = 0.01*Smax; % soil moisture store
    G = 0;         % groundwater store
    
    % Step 2: loop to run model for each timestep
    for iTS = 1:NumTimesteps
        % define precipitation at each timestep
        P = precip(iTS);
        
        % Define T value for each month 
       if (month (iTS) == 1) || (month (iTS) == 3) ||(month (iTS) == 5 )||(month (iTS)== 7) || (month (iTS) == 8) ||(month (iTS)== 10 )||(month (iTS)== 12)
           T(iTS) = 31;
       elseif month (iTS) == 2
           T(iTS) = 28;
       else 
           T(iTS) = 30;
       end   
  
       %Catchment water consumption potential 
        X0 = PET(iTS) + (Smax - S);
       
       %Consumption curve #1: Supply = rainfall, Demand = Catchment water
       %consumption potential
	    F1 = 1+P./X0 - (1+(P./X0).^a1).^(1/a1);
       
       %Catchment water consumption
        X = X0 .* F1;
       
       %Catchment water yield
        Y = max(P - X,0);
	    
       %Total water available for evapotranspiration
        W = S + X;
    
       %Consumption curve #2: Supply = water available for ET, Demand = PET
        F2 = 1+W./PET(iTS)-(1+(W./PET(iTS)).^a2).^(1/a2);

        %Actual evapotranspiration
        ET = F2 .* PET(iTS);
       
        %Recharge to groundwater store
        R = max(B * Y,0);
       
        %Surface Runoff
        Qs = max(Y - R, 0);		
       
        %Baseflow calculation
        Z = 1-exp(-T(iTS)/K);
        Qb1 = min(G*Z+R*(1-(K/T(iTS))*Z),G);
	    Qb= max(Qb1,0);
       
        %Groundwater store
        G = max(G+R-Qb,0);        
	    
       %Soil moisture storage
	    S1 = max(W-ET,0);

        % Step 3: impliment  sustained local groundwater drainage hypothesis
        % ensure soil moisture is not over exceedance
        S = min(S1,Smax); 
       
        % Accounting for soil moisture storage exceedance
        if S1>Smax
            Qs=Qs+(S1-Smax);
        end 

        
         % Calculate streamflow
	     Q = Qs + Qb;  % combine for both stores

        % Step 4: Assign SimFlows and SimVars
        SimFlows(iTS) = Q; 
        if archive_req
	        SimVars.Flows.Qb(iTS) = Qb;
	        SimVars.Flows.Qs (iTS) = Qs;
            SimVars.States.G(iTS) = G;
            SimVars.States.S(iTS) = S;
	        SimVars.States.TotalWater(iTS) = G + S;
            SimVars.Flux.ET(iTS) = ET;
            SimVars.Flux.R(iTS) = R;
        end
                
        % Step 5: assert real outputs
        if  isreal(S) && isreal(G) && isreal(Q)
        else
            disp(ParVals);
            error(['Complex values in simulated Q for timestep ' num2str(iTS) ' for above parameter set.']);
        end
    end
end
